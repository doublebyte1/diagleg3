# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DiagLegDockWidget
                                 A QGIS plugin
 This plugin allows to create a legend, for diagrams generated through the "Overlay" tab of the layer properties.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-01-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by doublebyte
        email                : info@doublebyte.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import *

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'diagleg_dockwidget_base.ui'))


class DiagLegDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(DiagLegDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

            
        # Show that the slot has been called.

        # QObject.connect(self.pushGenerate, SIGNAL(("clicked()")), DiagLegDockWidget.onOk)
        # QtCore.QObject.connect(self.pushClose, SIGNAL(("clicked()")), DiagLegDockWidget.close)
        # QtCore.QObject.connect(self.pushExport, SIGNAL(("clicked()")), DiagLegDockWidget.onExport)
        # QtCore.QObject.connect(self.pushAbout, SIGNAL(("clicked()")), DiagLegDockWidget.onAbout)
        # QtCore.QMetaObject.connectSlotsByName(DiagLegDockWidget)

        self.setupUi(self)
        # DiagLegDockWidget.setObjectName(("DiagLegDockWidget"))
        # DiagLegDockWidget.resize(525, 634)
        # self.dockWidgetContents = QtGui.QWidget()
        # self.dockWidgetContents.setObjectName(("dockWidgetContents"))
        self.verticalLayout = QtWidgets.QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout.setObjectName(("verticalLayout"))
        self.frame = QtWidgets.QFrame(self.dockWidgetContents)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName(("frame"))
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_2.setObjectName(("gridLayout_2"))
        self.textEdit = QtWidgets.QTextEdit(self.frame)
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName(("textEdit"))
        self.gridLayout_2.addWidget(self.textEdit, 0, 0, 1, 1)
        self.verticalLayout.addWidget(self.frame)
        self.view = QtWidgets.QGraphicsView(self.dockWidgetContents)
        self.view.setObjectName(("view"))
        self.verticalLayout.addWidget(self.view)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName(("horizontalLayout"))
        self.pushGenerate = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushGenerate.setObjectName(("pushGenerate"))
        self.horizontalLayout.addWidget(self.pushGenerate)
        self.pushExport = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushExport.setObjectName(("pushExport"))
        self.horizontalLayout.addWidget(self.pushExport)
        self.pushClose = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushClose.setObjectName(("pushClose"))
        self.horizontalLayout.addWidget(self.pushClose)
        self.pushAbout = QtWidgets.QPushButton(self.dockWidgetContents)
        self.pushAbout.setObjectName(("pushAbout"))
        self.horizontalLayout.addWidget(self.pushAbout)
        self.verticalLayout.addLayout(self.horizontalLayout)
        #DiagLegDockWidget.setWidget(self.dockWidgetContents)




    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
